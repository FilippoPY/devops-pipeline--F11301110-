name: CI/CD Deployment Pipeline (Build → Unit → Integration → Staging → Prod)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # 1️⃣ BUILD
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # ✅ Generar artefacto real (dist/app.txt) para las pruebas de integración
      - name: "Build artifact"
        run: |
          mkdir -p dist
          echo "Build generado el $(date)" > dist/app.txt

      - name: "Package artifact"
        run: zip -r build.zip .  # incluye dist y tu código

      - name: "Upload artifact"
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  # 2️⃣ TEST UNITARIO
  test-unit:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: "Download artifact"
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      - name: "Unzip build"
        run: unzip -o build.zip

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: "Install pytest"
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      # Si no tienes tests/unit, se crea uno mínimo automáticamente
      - name: "Ensure unit tests exist (fallback)"
        run: |
          if [ ! -d tests/unit ]; then
            mkdir -p tests/unit
            cat > tests/unit/test_sample.py <<'EOF'
def add(a, b):
    return a + b

def test_add():
    assert add(2, 3) == 5

if __name__ == "__main__":
    print("✅ Se creó test unitario de ejemplo")
EOF
          fi

      - name: "Run UNIT tests"
        env:
          TEST_ENV: unit
        run: |
          echo "Running UNIT tests ($TEST_ENV)"
          pytest -q tests/unit

  # 3️⃣ TEST DE INTEGRACIÓN
  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - name: "Download artifact"
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      - name: "Unzip build"
        run: unzip -o build.zip

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: "Install pytest"
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      # Si no tienes tests/integration, se crea uno de ejemplo que verifica el artefacto
      - name: "Ensure integration tests exist (fallback)"
        run: |
          if [ ! -d tests/integration ]; then
            mkdir -p tests/integration
            cat > tests/integration/test_artifact.py <<'EOF'
import os

def test_artifact_exists():
    assert os.path.exists("dist/app.txt"), "❌ dist/app.txt no existe (fallo de integración)"

if __name__ == "__main__":
    print("✅ Se creó test de integración de ejemplo")
EOF
          fi

      - name: "Run INTEGRATION tests"
        env:
          TEST_ENV: integration
        run: |
          echo "Running INTEGRATION tests ($TEST_ENV)"
          pytest -q tests/integration

  # 4️⃣ DEPLOY STAGING (solo si pasan ambas pruebas)
  deploy-staging:
    needs: test-integration
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: "Download artifact"
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      - name: "Create GitHub Release (staging)"
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ vars.BUILD_TAG || 'staging-auto' }}
          body: ${{ vars.RELEASE_NOTE || 'Staging auto release after tests' }}
          prerelease: true
          files: build.zip

  # 5️⃣ DEPLOY PRODUCCIÓN (con aprobación manual del environment)
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: "Download artifact"
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      - name: "Create GitHub Release (prod)"
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ vars.BUILD_TAG || 'prod-auto' }}
          body: ${{ vars.RELEASE_NOTE || 'Production auto release after staging approval' }}
          files: build.zip
