name: CI/CD Deployment Pipeline (Build → Unit → Integration → Staging → Prod)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # 1️⃣ BUILD
  build:
    name: Build artifact
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.pkgver.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install --no-audit --no-fund || true

      - name: Build project
        run: |
          echo "🏗️ Running build step..."
          npm run build --if-present || true
          zip -r build.zip .

      - name: Get package version (fallback)
        id: pkgver
        run: |
          v=$(node -p "try{require('./package.json').version}catch(e){'0.0.0'}")
          echo "version=$v" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  # 2️⃣ TEST UNIT
  test-unit:
    name: Run Unit Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Unzip artifact
        run: unzip -o build.zip

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install --no-audit --no-fund || true

      - name: Run Unit Tests
        env:
          TEST_ENV: unit
        run: |
          echo "🧪 Running UNIT tests in $TEST_ENV environment"
          npm run test:unit --if-present || (echo "❌ Unit tests failed" && exit 1)

  # 3️⃣ TEST INTEGRATION
  test-integration:
    name: Run Integration Tests
    needs: test-unit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Unzip artifact
        run: unzip -o build.zip

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install --no-audit --no-fund || true

      - name: Run Integration Tests
        env:
          TEST_ENV: integration
        run: |
          echo "🔗 Running INTEGRATION tests in $TEST_ENV environment"
          npm run test:integration --if-present || (echo "❌ Integration tests failed" && exit 1)

  # 4️⃣ DEPLOY STAGING
  deploy-staging:
    name: Deploy to Staging
    needs: test-integration
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Compute metadata
        id: meta
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          TAG="${{ vars.BUILD_TAG }}"
          NOTE="${{ vars.RELEASE_NOTE }}"
          [ -z "$TAG" ] && TAG="staging-v$VERSION"
          [ -z "$NOTE" ] && NOTE="Staging release after successful tests"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "note=$NOTE" >> "$GITHUB_OUTPUT"

      - name: Release to Staging
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.meta.outputs.tag }}" build.zip --notes "${{ steps.meta.outputs.note }}"

  # 5️⃣ DEPLOY PRODUCTION (requires manual approval)
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Compute metadata
        id: meta
        run: |
          VERSION="${{ needs.build.outputs.version }}"
          TAG="${{ vars.BUILD_TAG }}"
          NOTE="${{ vars.RELEASE_NOTE }}"
          [ -z "$TAG" ] && TAG="prod-v$VERSION"
          [ -z "$NOTE" ] && NOTE="Production release after approval"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "note=$NOTE" >> "$GITHUB_OUTPUT"

      - name: Release to Production
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.meta.outputs.tag }}" build.zip --notes "${{ steps.meta.outputs.note }}"
