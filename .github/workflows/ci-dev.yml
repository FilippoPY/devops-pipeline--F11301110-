name: CI Dev Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  # 1️⃣ BUILD
  build:
    name: Build artifact
    runs-on: ubuntu-latest
    outputs:
      build_tag: ${{ steps.meta.outputs.build_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build (generate artifact)
        run: |
          echo "🏗️ Building project..."
          mkdir -p dist
          echo "Build generado el $(date)" > dist/app.txt
          zip -r build.zip dist/

      - name: Define metadata
        id: meta
        run: |
          TAG="build-$(date +%s)"
          echo "build_tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  # 2️⃣ UNIT TESTS
  test-unit:
    name: Run Unit Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install pytest
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Ensure unit tests exist
        run: |
          mkdir -p tests/unit
          cat > tests/unit/test_basic.py <<'EOF'
def add(a, b):
    return a + b

def test_add():
    assert add(2, 3) == 5

if __name__ == "__main__":
    print("✅ Unit test de ejemplo creado correctamente.")
EOF

      - name: Run Unit Tests
        env:
          TEST_ENV: unit
        run: |
          echo "🧪 Running UNIT tests ($TEST_ENV)"
          pytest -q tests/unit || (echo "❌ Unit tests failed" && exit 1)

  # 3️⃣ INTEGRATION TESTS
  test-integration:
    name: Run Integration Tests
    needs: test-unit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install pytest
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Ensure integration test exists
        run: |
          mkdir -p tests/integration
          cat > tests/integration/test_artifact.py <<'EOF'
import os

def test_artifact_exists():
    assert os.path.exists("dist/app.txt"), "❌ dist/app.txt no existe"

if __name__ == "__main__":
    print("✅ Integration test creado correctamente.")
EOF

      - name: Run Integration Tests
        env:
          TEST_ENV: integration
        run: |
          echo "🔗 Running INTEGRATION tests ($TEST_ENV)"
          pytest -q tests/integration || (echo "❌ Integration tests failed" && exit 1)

  # 4️⃣ DEPLOY STAGING
  deploy-staging:
    name: Deploy to Staging
    needs: test-integration
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Compute metadata
        id: meta
        run: |
          TAG="${{ needs.build.outputs.build_tag }}"
          NOTE="Staging release after passing all tests"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "note=$NOTE" >> "$GITHUB_OUTPUT"

      - name: Release to Staging
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Deploying to staging environment..."
          gh release create "${{ steps.meta.outputs.tag }}" build.zip --notes "${{ steps.meta.outputs.note }}"

  # 5️⃣ DEPLOY PRODUCTION (manual approval)
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Compute metadata
        id: meta
        run: |
          TAG="${{ needs.build.outputs.build_tag }}"
          NOTE="Production release after manual approval"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "note=$NOTE" >> "$GITHUB_OUTPUT"

      - name: Release to Production
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Deploying to production..."
          gh release create "${{ steps.meta.outputs.tag }}" build.zip --notes "${{ steps.meta.outputs.note }}"
