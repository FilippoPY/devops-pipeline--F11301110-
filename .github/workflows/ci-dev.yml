name: CI Dev Deployment

on:
  push:
    branches: [ main ]

# Asegura permiso para crear/actualizar releases
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi

      - name: Run tests (if any)
        run: |
          if [ -f "pytest.ini" ] || [ -d "tests" ]; then pip install pytest && pytest -q; else echo "No tests detected. Skipping."; fi

      - name: Package artifact
        run: zip -r build.zip .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  deploy-dev:
    needs: build
    runs-on: ubuntu-latest
    environment: dev   # <- debe coincidir con el nombre del environment
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .

      # Debug útil: imprime TAG/NOTE y lista archivos
      - name: Debug env & files
        run: |
          echo "TAG=${{ vars.BUILD_TAG }}"
          echo "NOTE=${{ vars.RELEASE_NOTE }}"
          ls -lh

      # Asegura que GH CLI esté y que tengamos auth
      - name: Ensure GitHub CLI
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y gh
          fi

      # Falla temprano si TAG está vacío (var no configurada en 'dev')
      - name: Guard: TAG must exist
        run: |
          if [ -z "${{ vars.BUILD_TAG }}" ]; then
            echo "ERROR: BUILD_TAG not set in environment 'dev'"; exit 1; fi

      - name: Auth status
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh auth status || gh auth login --with-token <<< "${GH_TOKEN}"

      # Crea o actualiza el release (si ya existe, sube el zip con --clobber)
      - name: Create or update Dev release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG:  ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          if gh release view "$TAG" >/dev/null 2>&1; then
            gh release upload "$TAG" build.zip --clobber
          else
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi
